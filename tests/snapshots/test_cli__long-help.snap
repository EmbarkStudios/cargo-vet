---
source: tests/test-cli.rs
expression: format_outputs(&output)
---
stdout:
cargo-vet 0.1.0
Supply-chain security for Rust

USAGE:
    cargo vet [OPTIONS] [SUBCOMMAND]

OPTIONS:
        --diff-cache <DIFF_CACHE>
            Use the following path as the diff-cache
            
            The diff-cache stores the summary results used by vet's suggestion machinery. This is
            automatically managed in vet's tempdir, but if you want to manually store it somewhere
            more reliable, you can.
            
            This mostly exists for testing vet itself.

        --exclude <SPEC>
            Exclude packages from being processed

        --features <FEATURES>
            Space-separated list of features to activate

        --filter-graph <FILTER_GRAPH>
            Filter out different parts of the build graph and pretend that's the true graph
            
            Example: `--filter-graph="exclude(any(eq(is_dev_only(true)),eq(name(serde_derive))))"`
            
            This mostly exists to debug or reduce projects that cargo-vet is mishandling.
            Combining this with `cargo vet --output-format=json dump-graph` can produce an
            input that can be added to vet's test suite.
            
            
            The resulting graph is computed as follows:
            
            1. First compute the original graph
            2. Then apply the filters to find the new set of nodes
            3. Create a new empty graph
            4. For each workspace member that still exists, recursively add it and its dependencies
            
            This means that any non-workspace package that becomes "orphaned" by the filters will
            be implicitly discarded even if it passes the filters.
            
            Possible filters:
            
            * `include($query)`: only include packages that match this filter
            * `exclude($query)`: exclude packages that match this filter
            
            
            Possible queries:
            
            * `any($query1, $query2, ...)`: true if any of the listed queries are true
            * `all($query1, $query2, ...)`: true if all of the listed queries are true
            * `not($query)`: true if the query is false
            * `$property`: true if the package has this property
            
            
            Possible properties:
            
            * `name($string)`: the package's name (i.e. `serde`)
            * `version($version)`: the package's version (i.e. `1.2.0`)
            * `is_root($bool)`: whether it's a root in the original graph (ignoring dev-deps)
            * `is_workspace_member($bool)`: whether the package is a workspace-member (can be
            tested)
            * `is_third_party($bool)`: whether the package is considered third-party by vet
            * `is_dev_only($bool)`: whether it's only used by dev (test) builds in the original
            graph

    -h, --help
            Print help information

        --locked
            Do not pull in new "audits" and try to avoid the network

        --log-file <LOG_FILE>
            Instead of stderr, write logs to this file (only used after successful CLI parsing)

        --manifest-path <PATH>
            Path to Cargo.toml

        --no-all-features
            Don't use --all-features
            
            We default to passing --all-features to `cargo metadata` because we want to analyze your
            full dependency tree

        --no-default-features
            Do not activate the `default` feature

        --output-file <OUTPUT_FILE>
            Instead of stdout, write output to this file

        --output-format <OUTPUT_FORMAT>
            The format of the output
            
            [default: human]
            [possible values: human, json]

    -p, --package <SPEC>
            Package to process (see `cargo help pkgid`)

        --readonly-lockless
            Do not modify or lock the store (supply-chain) directory
            
            This is primarily intended for testing and should not be used without good reason.

    -V, --version
            Print version information

        --verbose <VERBOSE>
            How verbose logging should be (log level)
            
            [default: warn]
            [possible values: off, error, warn, info, debug, trace]

        --workspace
            Process all packages in the workspace

SUBCOMMANDS:
    accept-criteria-change
            Accept changes that a foreign audits.toml made to their criteria
    add-unaudited
            Mark `$package $version` as unaudited
    certify
            Mark `$package $version` as reviewed
    diff
            Yield a diff against the last reviewed version
    dump-graph
            Print a mermaid-js visualization of the cargo build graph as understood by cargo-vet
    fetch-imports
            Explicitly fetch the imports (foreign audit files)
    fmt
            Reformat all of vet's files (in case you hand-edited them)
    help
            Print this message or the help of the given subcommand(s)
    init
            initialize cargo-vet for your project
    inspect
            Fetch the source of `$package $version`
    record-violation
            Mark `$package $version` as a violation of policy
    regenerate-unaudited
            Regenerate the 'unaudited' entries to try to minimize them and make the vet pass
    suggest
            Suggest some low-hanging fruit to review

stderr:

