---
source: tests/test-cli.rs
expression: stdout
---
cargo-vet 0.1.0
Supply-chain security for Rust

USAGE:
    cargo vet [OPTIONS] [SUBCOMMAND]

OPTIONS:
        --all-features
            Activate all available features

        --diff-cache <DIFF_CACHE>
            Use the following path as the diff-cache

        --exclude <SPEC>
            Exclude packages from being processed

        --features <FEATURES>
            Space-separated list of features to activate

        --filter-graph <FILTER_GRAPH>
            Filter out different parts of the build graph and pretend that's the true graph

    -h, --help
            Print help information

        --locked
            Do not pull in new "audits" and try to avoid the network

        --log-file <LOG_FILE>
            Instead of stderr, write logs to this file (only used after successful CLI parsing)

        --manifest-path <PATH>
            Path to Cargo.toml

        --no-default-features
            Do not activate the `default` feature

        --output-file <OUTPUT_FILE>
            Instead of stdout, write output to this file

        --output-format <OUTPUT_FORMAT>
            The format of the output [default: human] [possible values: human, json]

    -p, --package <SPEC>
            Package to process (see `cargo help pkgid`)

        --readonly-lockless
            Do not modify or lock the store (supply-chain) directory

    -V, --version
            Print version information

        --verbose <VERBOSE>
            How verbose logging should be (log level) [default: warn] [possible values: off, error,
            warn, info, debug, trace]

        --workspace
            Process all packages in the workspace

SUBCOMMANDS:
    accept-criteria-change    Accept changes that a foreign audits.toml made to their criteria
    add-unaudited             Mark `$package $version` as unaudited
    add-violation             Mark `$package $version` as a violation of policy
    certify                   Mark `$package $version` as reviewed
    diff                      Yield a diff against the last reviewed version
    dump-graph                Print a mermaid-js visualization of the cargo build graph as
                                  understood by cargo-vet
    fmt                       Reformat all of vet's files (in case you hand-edited them)
    help                      Print this message or the help of the given subcommand(s)
    init                      initialize cargo-vet for your project
    inspect                   Fetch the source of `$package $version`
    regenerate-unaudited      Regenerate the 'unaudited' entries to try to minimize them and
                                  make the vet pass
    suggest                   Suggest some low-hanging fruit to review

